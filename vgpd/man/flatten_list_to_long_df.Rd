% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/flatten_list_to_long_df.R
\name{flatten_list_to_long_df}
\alias{flatten_list_to_long_df}
\title{A wrapper to flatten an unpredictably nested list into a long dataframe.}
\usage{
flatten_list_to_long_df(nested_list, nested_list_name)
}
\arguments{
\item{nested_list}{A nested list to be flattened into a long dataframe.}

\item{nested_list_name}{The name of the list that should be associated with
all the path-order-type-value rows making up the long dataframe.}
}
\value{
Returns a long-format dataframe with one row for each
  path-order-type-value observed in a nested list.
}
\description{
\code{flatten_list_to_long_df} uses \code{extract_names_values} to flatten an
unpredictably nested list into a predictable collection of
path-order-type-value lists.
}
\details{
It then collapses these commonly structured sublists into a long dataframe
with each sublist becoming a row.

This dataframe is attached to a dataframe containing the nested list name
(required) to insure that the rows are associated correctly with their
source list.
}
\examples{
# Load the nested Steam API data.
data(steam_app_list)

# The Steam API data is a list of nested lists, with each nested list
# representing a Steam app (e.g., PC game).

# First we run the function on a nested list with minimal nesting/content.
simple_demo <- flatten_list_to_long_df(steam_app_list["5"])

# Compare that to a more complex nested list.
complex_demo <- flatten_list_to_long_df(steam_app_list["50"])

# Process multiple nested lists at once (but see flatten_list_to_df for
# the behavior you probably want).
multi_demo <- lapply(steam_app_list[1:5], flatten_list_to_long_df)

# This is probably not what we want.
bad_demo <- flatten_list_to_long_df(steam_app_list[1:5])

}

