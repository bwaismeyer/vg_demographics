browser()
collected_splits <- c()
for(i in 1:length(column)) {
current_value <- column[i]
value_vector <- str_split(current_value, split_by)
collected_splits <- c(collected_splits, value_vector)
}
return(collected_splits)
}
test <- split_column(lg$categories, "---")
value_vector
unlist(value_vector)
split_column <- function(column, split_by) {
collected_splits <- c()
for(i in 1:length(column)) {
current_value <- column[i]
value_vector <- unlist(str_split(current_value, split_by))
collected_splits <- c(collected_splits, value_vector)
}
return(collected_splits)
}
test <- split_column(lg$categories, "---")
test
library(dplyr)
library(tidyr)
library(jsonlite)
library(stringr)
load("raw_app_data.rda")
list_to_df <- function(target) {
values <- list(
"type" = target[["type"]],
"name" = target[["name"]],
"steam_appid" = target[["steam_appid"]],
"required_age" = target[["required_age"]],
"is_free" = target[["is_free"]],
"detailed_description" = target[["detailed_description"]],
"about_the_game" = target[["about_the_game"]],
"website" = target[["website"]],
"developers" = paste(target[["developers"]],
collapse = "---"),
"publishers" = paste(target[["publishers"]],
collapse = "---"),
"price_currency" = target[["price_overview"]][["currency"]],
"price_initial" = target[["price_overview"]][["initial"]],
"price_final" = target[["price_overview"]][["final"]],
"platform_windows" = target[["platforms"]][["windows"]],
"platform_mac" = target[["platforms"]][["mac"]],
"platform_linux" = target[["platforms"]][["linux"]],
"metacritic_score" = target[["metacritic"]][["score"]],
"metacritic_url" =  target[["metacritic"]][["url"]],
"recommendations" = target[["recommendations"]][["total"]],
"achievements" = target[["achievements"]][["total"]],
"release_date" = target[["release_date"]][["date"]],
"categories" = paste(target[["categories"]][["description"]],
collapse = "---"),
"genres" = paste(target[["genres"]][["description"]],
collapse = "---")
)
values <- data.frame(do.call(cbind, values), stringsAsFactors = FALSE)
return(values)
}
raw_to_df <- function(raw_app_data) {
df_collection <- lapply(raw_app_data, function(x) list_to_df(x$data))
df <- dplyr::rbind_all(df_collection)
return(df)
}
app_df <- raw_to_df(raw_app_data)
head(sort(table(app_df$genres), decreasing = TRUE), 20)
split_column <- function(column, split_by) {
collected_splits <- c()
for(i in 1:length(column)) {
current_value <- column[i]
value_vector <- unlist(str_split(current_value, split_by))
collected_splits <- c(collected_splits, value_vector)
}
return(collected_splits)
}
cols_to_split <- c("developers", "publishers", "categories", "genres")
split_column <- function(column, split_by, id_col = NULL) {
collected_splits <- c()
if(is.null(id_col)) {
for(i in 1:length(column)) {
current_value <- column[i]
value_vector <- unlist(str_split(current_value, split_by))
collected_splits <- c(collected_splits, value_vector)
}
return(collected_splits)
} else {
collected_ids <- c()
for(i in 1:length(column)) {
current_value <- column[i]
value_vector <- unlist(str_split(current_value, split_by))
collected_splits <- c(collected_splits, value_vector)
current_id <- id_col[i]
id_vector <- rep(current_id, length(value_vector))
collected_ids <- c(collected_ids, id_vector)
}
splits_with_id <- data.frame(collected_ids, collected_splits)
return(splits_with_id)
}
}
lg <- head(app_df)
lg
split_column(lg$developers, "---", lg$steam_appid)
split_column <- function(column, split_by, id_col = NULL) {
collected_splits <- c()
if(is.null(id_col)) {
for(i in 1:length(column)) {
current_value <- column[i]
value_vector <- unlist(str_split(current_value, split_by))
collected_splits <- c(collected_splits, value_vector)
}
} else {
collected_ids <- c()
for(i in 1:length(column)) {
current_value <- column[i]
value_vector <- unlist(str_split(current_value, split_by))
collected_splits <- c(collected_splits, value_vector)
current_id <- id_col[i]
id_vector <- rep(current_id, length(value_vector))
collected_ids <- c(collected_ids, id_vector)
}
collected_splits <- data.frame(collected_ids, collected_splits)
}
if(is.data.frame(collected_splits)) {
collected_splits <- collected_splits %>%
ifelse(is.na(collected_splits),
NA,
collected_splits)
} else {
collected_splits <- ifelse(is.na(collected_splits),
NA,
collected_splits)
}
return(collected_splits)
}
split_column(lg$developers, "---", lg$steam_appid)
split_column <- function(column, split_by, id_col = NULL) {
collected_splits <- c()
if(is.null(id_col)) {
for(i in 1:length(column)) {
current_value <- column[i]
value_vector <- unlist(str_split(current_value, split_by))
collected_splits <- c(collected_splits, value_vector)
}
} else {
collected_ids <- c()
for(i in 1:length(column)) {
current_value <- column[i]
value_vector <- unlist(str_split(current_value, split_by))
collected_splits <- c(collected_splits, value_vector)
current_id <- id_col[i]
id_vector <- rep(current_id, length(value_vector))
collected_ids <- c(collected_ids, id_vector)
}
collected_splits <- data.frame(collected_ids, collected_splits)
}
if(is.data.frame(collected_splits)) {
collected_splits$collected_splits <-
ifelse(is.na(collected_splits$collected_splits),
NA,
collected_splits$collected_splits)
} else {
collected_splits <- ifelse(is.na(collected_splits),
NA,
collected_splits)
}
return(collected_splits)
}
split_column(lg$developers, "---", lg$steam_appid)
split_column <- function(column, split_by, id_col = NULL) {
collected_splits <- c()
if(is.null(id_col)) {
for(i in 1:length(column)) {
current_value <- column[i]
value_vector <- unlist(str_split(current_value, split_by))
collected_splits <- c(collected_splits, value_vector)
}
} else {
collected_ids <- c()
for(i in 1:length(column)) {
current_value <- column[i]
value_vector <- unlist(str_split(current_value, split_by))
collected_splits <- c(collected_splits, value_vector)
current_id <- id_col[i]
id_vector <- rep(current_id, length(value_vector))
collected_ids <- c(collected_ids, id_vector)
}
collected_splits <- data.frame(collected_ids, collected_splits)
}
return(collected_splits)
}
split_column(lg$developers, "---", lg$steam_appid)
rm(lg)
test <- split_column(app_df$developers, "---", app_df$steam_appid)
head(tes)
head(test)
head(test, 100)
unique(test$collected_splits)
str(test)
str(app-df)
str(app_df)
split_column <- function(column, split_by, id_col = NULL) {
collected_splits <- c()
if(is.null(id_col)) {
for(i in 1:length(column)) {
current_value <- column[i]
value_vector <- unlist(str_split(current_value, split_by))
collected_splits <- c(collected_splits, value_vector)
}
} else {
collected_ids <- c()
for(i in 1:length(column)) {
current_value <- column[i]
value_vector <- unlist(str_split(current_value, split_by))
collected_splits <- c(collected_splits, value_vector)
current_id <- id_col[i]
id_vector <- rep(current_id, length(value_vector))
collected_ids <- c(collected_ids, id_vector)
}
collected_splits <- data.frame(collected_ids, collected_splits,
stringsAsFactors = FALSE)
}
return(collected_splits)
}
test <- split_column(app_df$developers, "---", app_df$steam_appid)
str(test)
head(test)
sum(is.na(test$collected_splits))
test <- split_column(app_df$publishers, "---", app_df$steam_appid)
unique(test$collected_splits)
test <- lapply(cols_to_split, split_column, function(x) {
current_col <- app_df[[x]]
split_col <- split_column(current_col, "---", app_df$steam_appid)
return(split_col)
})
test <- list()
for(i in length(cols_to_split)) {
current_var <- cols_to_split[[i]]
current_col <- app_df[[current_var]]
id_col <- app_df$steam_appid
current_split <- split_column(current_col, "---", id_col)
test[current_var] <- list(current_split)
}
str(test)
test <- list()
for(i in 1:length(cols_to_split)) {
current_var <- cols_to_split[[i]]
current_col <- app_df[[current_var]]
id_col <- app_df$steam_appid
current_split <- split_column(current_col, "---", id_col)
test[current_var] <- list(current_split)
}
str(test)
test <- list()
for(i in 1:length(cols_to_split)) {
current_var <- cols_to_split[[i]]
current_col <- app_df[[current_var]]
id_col <- app_df$steam_appid
current_split <- split_column(current_col, "---", id_col)
names(current_split) <- c("steam_appid", current_var)
test[current_var] <- list(current_split)
}
str(test)
?do.call
do.call(left_join, test)
test2 <- left_join(test$developers, test$publishers)
str(test2)
join_test <- app_df %>%
left_join(test$developers) %>%
left_join(test$publishers) %>%
left_join(test$categories) %>%
left_join(test$genres)
str(join_test)
join_test %>%
filter(steam_appid == "5000")
join_test %>%
filter(steam_appid == "5500")
join_test %>%
filter(steam_appid == "5600")
join_test %>%
filter(steam_appid == "4000")
head(join_test, 50)
print(join_test, 50)
print(join_test, n = 50)
join_test %>%
data.frame() %>%
head(50)
join_test %>%
filter(steam_appid = 80) %>%
data.frame()
join_test %>%
filter(steam_appid == 80) %>%
data.frame()
join_test %>%
filter(steam_appid == 80) %>%
data.frame() %>%
select(steam_appid, genres, categories)
join_test %>%
filter(steam_appid == 80) %>%
data.frame() %>%
select(steam_appid, genres, categories)
test <- list()
for(i in 1:length(cols_to_split)) {
current_var <- cols_to_split[[i]]
current_col <- app_df[[current_var]]
id_col <- app_df$steam_appid
current_split <- split_column(current_col, "---", id_col)
names(current_split) <- c("steam_appid", paste0("split_", current_var))
test[current_var] <- list(current_split)
}
str(test)
join_test <- app_df %>%
left_join(test$developers) %>%
left_join(test$publishers) %>%
left_join(test$categories) %>%
left_join(test$genres)
str(join_test)
str(app_df)
join_test %>%
filter(steam_appid == 80) %>%
data.frame() %>%
select(steam_appid, split_categories, split_genres)
join_test %>%
filter(steam_appid == 80) %>%
data.frame() %>%
select(steam_appid, split_publishers, split_developers, split_categories, split_genres)
app_df %>%
filter(steam_appid) %>%
select(steam_appid, publishers, developers, categories, genres)
app_df %>%
filter(steam_appid == 80) %>%
select(steam_appid, publishers, developers, categories, genres)
unique(app_df$steam_appid)
length(unique(app_df$steam_appid))
app_df %>%
filter(steam_appid == 80)
app_df %>%
filter(steam_appid == 80) %>%
data.frame()
str(raw_app_data)
length(raw_app_data)
steam_app_names <- fromJSON("http://api.steampowered.com/ISteamApps/GetAppList/v2")
steam_app_names <- fromJSON("http://api.steampowered.com/ISteamApps/GetAppList/v2")
str(steam_app_names)
app_name_df <- do.call(rbind, lapply(steam_app_names, as.data.frame, stringsAsFactors = FALSE))
names(app_name_df) <- c("appid", "name")
steam_app_names %>% filter(appid == 80)
app_name_df %>% filter(appid == 80)
head(raw_app_data, 1)
raw_app_data[80]
raw_app_data['80']
head(names(raw_app_data))
n_test <- names(raw_app_data)
n_test
length(n_test)
unique(n_test)
length(unique(n_test))
str(app_df)
nrow(app-df)
nrow(app_df)
length(unique(app_df$steam_appid))
app_df %>% group_by(steam_appid) %>% summarise(n())
app_df %>% group_by(steam_appid) %>% summarise(count = n()) %>% arrange(desc(count()))
app_df %>% group_by(steam_appid) %>% summarise(count = n()) %>% arrange(desc(count))
table(names(raw_app_data))
sort(table(names(raw_app_data)))
length(unique(names(raw_app_data)))
sum(names(raw_app_data) == "")
lg <- head(raw_app_data)
str(lg)
lg$5
lg[['5']]
lg[['80']]
lg <- raw_app_data[['80']]
lg
names(lg)
lg$data
names(lg$data)
test <- data.frame(lg$data)
typeof(lg$data)
type(lg$data$type)
typeof(lg$data$type)
length(lg$data)
as.character(lg$data)
unlist(lg$data)
lg$data[1]
typeof(lg$data[1])
names(lg$data)
extract_values <- function(nested_list, collapse_string = "---") {
# define vector
value_bucket <- c()
# grab item names
item_names <- names(nested_list)
# loop over each item in the raw_app list
for(i in 1:length(nested_list)) {
current_item <- nested_list[[i]]
current_name <- item_names[[i]]
# test if list... if not, grab the values and pass it to the
# collection object, named after the current item
if(typeof(current_item) != "list") {
values <- paste(current_item, collapse = collapse_string)
value_bucket <- c(value_bucket, current_name = values)
} else {
# if list, then loop over the elements of each list recursively,
# passing out values when reached
values <- extract_values(current_item)
value_bucket <- c(value_bucket, values)
}
}
return(value_bucket)
}
extract_values <- function(nested_list, collapse_string = "---") {
# define vector
value_bucket <- c()
# grab item names
item_names <- names(nested_list)
# loop over each item in the raw_app list
for(i in 1:length(nested_list)) {
current_item <- nested_list[[i]]
current_name <- item_names[[i]]
# test if list... if not, grab the values and pass it to the
# collection object, named after the current item
if(typeof(current_item) != "list") {
values <- paste(current_item, collapse = collapse_string)
value_bucket <- c(value_bucket, current_name = values)
} else {
# if list, then loop over the elements of each list recursively,
# passing out values when reached
values <- extract_values(current_item)
value_bucket <- c(value_bucket, values)
}
}
# return the values extracted from the nested list - really the values
# passed from the current nested list mode or the final product of
# hybrid of grabs from direct nodes or recursive calls to the extract
# function
return(value_bucket)
}
str(test)
test <- extract_values(lg$data)
extract_values <- function(nested_list, collapse_string = "---") {
browser()
# define vector
value_bucket <- c()
# grab item names
item_names <- names(nested_list)
# loop over each item in the raw_app list
for(i in 1:length(nested_list)) {
current_item <- nested_list[[i]]
current_name <- item_names[[i]]
# test if list... if not, grab the values and pass it to the
# collection object, named after the current item
if(typeof(current_item) != "list") {
values <- paste(current_item, collapse = collapse_string)
value_bucket <- c(value_bucket, current_name = values)
} else {
# if list, then loop over the elements of each list recursively,
# passing out values when reached
values <- extract_values(current_item)
value_bucket <- c(value_bucket, values)
}
}
# return the values extracted from the nested list - really the values
# passed from the current nested list mode or the final product of
# hybrid of grabs from direct nodes or recursive calls to the extract
# function
return(value_bucket)
}
test <- extract_values(lg$data)
values
n
i
test <- extract_values(lg$data)
value_bucket
names(value_bucket)
library(dplyr)
library(tidyr)
library(jsonlite)
library(stringr)
find_rtools()
install.packages("Rtools")
63 + 70 + 60
??ggvis
library(ggvis)
mtcars %>%
ggvis(x = ~wt, y = ~mpg) %>%
layer_points()
mtcars %>% ggvis(~wt, ~mpg, fill := "red", stroke := "black") %>% layer_points()
mtcars %>% ggvis(~wt, ~mpg, fill = "red", stroke := "black") %>% layer_points()
mtcars %>% ggvis(~wt, ~mpg, fill := "red", stroke := "black") %>% layer_points()
mtcars %>%
ggvis(~wt, ~mpg,
size := input_slider(10, 100),
opacity := input_slider(0, 1)
) %>%
layer_points()
mtcars %>%
ggvis(~wt) %>%
layer_histograms(width =  input_slider(0, 2, step = 0.10, label = "width"),
center = input_slider(0, 2, step = 0.05, label = "center"))
mtcars %>%
ggvis(~wt) %>%
layer_histograms(width =  input_slider(0, 2, step = 0.10, label = "width"),
center = input_slider(0, 2, step = 0.05, label = "center"))
library(devtools)
has_devel()
ls
getwd()
devtools::create("./vgdata")
ls
devtools::create("./vgpd")
